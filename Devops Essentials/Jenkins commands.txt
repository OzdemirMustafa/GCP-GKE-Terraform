    1  gcloud config set compute/zone us-east1-d
    2  git clone https://github.com/GoogleCloudPlatform/continuous-deployment-on-kubernetes.git
    3  cd continuous-deployment-on-kubernetes
    4  gcloud container clusters create jenkins-cd --num-nodes 2 --machine-type n1-standard-2 --scopes "https://www.googleapis.com/auth/source.read_write,cloud-platform"
    5  clear
    6  gcloud container clusters list
    7  gcloud container clusters get-credentials jenkins-cd
    8  kubectl cluster-info
    9  clear
   10  wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.1-linux-amd64.tar.gz
   11  tar zxfv helm-v2.14.1-linux-amd64.tar.gz
   12  cp linux-amd64/helm .
   13  kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value account)
   14  kubectl create serviceaccount tiller --namespace kube-system
   15  kubectl create clusterrolebinding tiller-admin-binding --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
   16  ./helm init --service-account=tiller
   17  ./helm update
   18  ./helm version
   19  clear
   20  ./helm install -n cd stable/jenkins -f jenkins/values.yaml --version 1.2.2 --wait
   21  kubectl get pods
   22  kubectl create clusterrolebinding jenkins-deploy --clusterrole=cluster-admin --serviceaccount=default:cd-jenkins
   23  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
   24  kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &
   25  kubectl get svc
   26  printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo
   27  ls
   28  cd sample-app/
   29  clear
   30  kubectl create ns production
   31  kubectl apply -f k8s/production -n production
   32  kubectl apply -f k8s/canary -n production
   33  kubectl apply -f k8s/services -n production
   34  kubectl scale deployment gceme-frontend-production -n production --replicas 4
   35  kubectl get pods -n production -l app=gceme -l role=frontend
   36  kubectl get pods -n production -l app=gceme -l role=backend
   37  kubectl get service gceme-frontend -n production
   38  export FRONTEND_SERVICE_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   39  curl http://$FRONTEND_SERVICE_IP/version
   40  gcloud source repos create default
   41  clear
   42  git init
   43  git config credential.helper gcloud.sh
   44  git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/default
   45  git config --global user.email "mustfaozdmir@gmail.com"
   46  git config --global user.name "OzdemirMustafa"
   47  git add .
   48  git commit -m "Initial commit"
   49  git push origin master
   50  clear
   51  git checkout -b new-feature
   52  vi Jenkinsfile
   53  vi html.go
   54  vi main.go
   55  git add Jenkinsfile html.go main.go
   56  git commit -m "Version 2.0.0"
   57  git push origin new-feature
   58  kubectl proxy &
   59  curl http://localhost:8001/api/v1/namespaces/new-feature/services/gceme-frontend:80/proxy/version
   60  git checkout -b canary
   61  git push origin canary
   62  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   63  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   64  while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
   65  git checkout master
   66  git merge canary
   67  git push origin master
   68  clear
   69  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   70  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   71  while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
   72  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   73  while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
   74  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   75  while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
   76  clear
   77  export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
   78  while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
   79  kubectl get service gceme-frontend -n production
   80  history